(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{471:function(e,n,t){"use strict";t.r(n);var a=t(2),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p",[e._v("'「ゼロからのOS自作入門」3章 3.1〜3.3を実行します(前編)'")]),e._v(" "),t("ClientOnly",[t("CallInArticleAdsense")],1),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#qemuモニタ"}},[e._v("QEMUモニタ")])]),t("li",[t("a",{attrs:{href:"#レジスタ"}},[e._v("レジスタ")])]),t("li",[t("a",{attrs:{href:"#カーネルのコード改良点"}},[e._v("カーネルのコード改良点")])]),t("li",[t("a",{attrs:{href:"#コードの全容"}},[e._v("コードの全容")])]),t("li",[t("a",{attrs:{href:"#build"}},[e._v("Build")])]),t("li",[t("a",{attrs:{href:"#まとめ"}},[e._v("まとめ")])]),t("li",[t("a",{attrs:{href:"#参考サイト"}},[e._v("参考サイト")])])])]),t("p"),e._v(" "),t("p",[t("a",{attrs:{href:"https://px.a8.net/svt/ejp?a8mat=3HBXCY+4DRW36+50+2HM5Z5",rel:"nofollow"}},[t("img",{attrs:{border:"0",width:"1000",height:"124",alt:"",src:"https://www27.a8.net/svt/bgt?aid=210508450265&wid=001&eno=01&mid=s00000000018015052000&mc=1"}})]),t("img",{attrs:{border:"0",width:"1",height:"1",src:"https://www10.a8.net/0.gif?a8mat=3HBXCY+4DRW36+50+2HM5Z5",alt:""}})]),e._v(" "),t("p",[t("a",{attrs:{href:"https://px.a8.net/svt/ejp?a8mat=3HIN6N+3YAMCY+CO4+6BMG1",rel:"nofollow"}},[t("img",{attrs:{border:"0",width:"1000",height:"124",alt:"",src:"https://www23.a8.net/svt/bgt?aid=210821855239&wid=001&eno=01&mid=s00000001642001062000&mc=1"}})]),t("img",{attrs:{border:"0",width:"1",height:"1",src:"https://www17.a8.net/0.gif?a8mat=3HIN6N+3YAMCY+CO4+6BMG1",alt:""}})]),e._v(" "),t("p",[t("a",{attrs:{href:"https://px.a8.net/svt/ejp?a8mat=3HIN6N+7FBNEA+4AQ0+5YJRM",rel:"nofollow"}},[e._v("全国630店舗以上！もみほぐし・足つぼ・ハンドリフレ・クイックヘッドのリラクゼーション店【りらくる】")]),t("img",{attrs:{border:"0",width:"1",height:"1",src:"https://www15.a8.net/0.gif?a8mat=3HIN6N+7FBNEA+4AQ0+5YJRM",alt:""}})]),e._v(" "),t("h2",{attrs:{id:"qemuモニタ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#qemuモニタ"}},[e._v("#")]),e._v(" QEMUモニタ")]),e._v(" "),t("p",[e._v("下記のコードでQEMUモニタを起動します．")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("qemu-system-x86_64 -drive "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("pflash,format"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("raw,file"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/osbook/devenv/OVMF_CODE.fd -drive "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("pflash,format"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("raw,file"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/osbook/devenv/OVMF_VARS.fd -drive "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("file")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("disk.img,format"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("raw,index"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(",media"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("disk -monitor stdio\n")])])]),t("p",[t("img",{staticClass:"lazy",attrs:{alt:"","data-src":"/image/mikanos/qemu_monitor01.png",loading:"lazy"}})]),e._v(" "),t("p",[e._v("下記のコードでレジスタの情報を表示します．")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("qemu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" info registers\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# RAX=0000000000000000 RBX=0000000000000001 RCX=0000000007b7b1c0 RDX=0000000000000002")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# RSI=0000000000000400 RDI=0000000007ea9270 RBP=000000000000002c RSP=0000000007ea88a0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# R8 =00000000000000af R9 =0000000000000288 R10=0000000000000050 R11=0000000000000000")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# R12=000000000669258c R13=0000000007ea8930 R14=0000000007230ca0 R15=0000000007ea88e8")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# RIP=000000000669143a RFL=00000202 [-------] CPL=0 II=0 A20=1 SMM=0 HLT=0")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ES =0030 0000000000000000 ffffffff 00cf9300 DPL=0 DS   [-WA]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# CS =0038 0000000000000000 ffffffff 00af9a00 DPL=0 CS64 [-R-]")]),e._v("\n")])])]),t("p",[e._v("下記のコードで任意のメモリ領域の値を表示できます．")]),e._v(" "),t("p",[e._v("表示の設定は「x /format 先頭文字」です．/formatは［表示数］［フォーマット］［サイズ］となります．")]),e._v(" "),t("ul",[t("li",[e._v("表示数：そのまま．何個表示するか．")]),e._v(" "),t("li",[e._v("ファーマット：16進数表示のx,10進数表示のd，逆アセンブリ表示のi")]),e._v(" "),t("li",[e._v("サイズ：1バイトはb，2バイトはh，4バイトはw，8バイトはg")])]),e._v(" "),t("p",[e._v("「/4xb」では「4個表示，16進数，単位は1バイト」となります．")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("qemu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" x /4xb 0x067ae4c4\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 00000000067ae4c4: 0xeb 0xfe 0x66 0x90")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# (qemu) x /2i 0x067ae4c4")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 0x067ae4c4:  00 00                    addb     %al, (%rax)")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 0x067ae4c6:  00 00                    addb     %al, (%rax)")]),e._v("\n")])])]),t("h2",{attrs:{id:"レジスタ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#レジスタ"}},[e._v("#")]),e._v(" レジスタ")]),e._v(" "),t("blockquote",[t("p",[e._v("レジスタとは、レジスタとは、CPU（中央演算装置）そのものに内蔵されている記憶装置である。計算中のデータや計算結果データを一時的に保持する領域などとして用いられる。典型的にはCPUの部品であるが、CPU以外でも複雑な処理を行う集積回路（たとえばGPU）がレジスタを内蔵する場合はある。"),t("br"),e._v(" "),t("br"),e._v("\nコンピュータの演算処理の手順は、きわめて大雑把にいえば、（1）演算装置が記憶装置らデータを読み取り、（2）その内容に従って演算処理を行い、（3）演算の結果を再び記憶装置に書き込む、といった流れの繰り返しで成り立っている。この一連の流れにおいて、演算装置と記憶装置の間で行われるデータ転送が相対的に遅くなり（ボトルネックとなり）やすい。レジスタはきわめて高速に動作する記憶装置であり、かつ、CPUの内部（つまり演算装置に直結した場所）に設置され、高速なバスで結合されている。両素子が同じ配線上の最短距離に位置することにより、データ転送速度の最高速化が実現されている。"),t("br"),e._v("\n引用元"),t("a",{attrs:{href:"https://www.weblio.jp/content/%E3%83%AC%E3%82%B8%E3%82%B9%E3%82%BF",target:"_blank",rel:"noopener noreferrer"}},[e._v("レジスタ（register）とは - IT用語辞典 e-Words"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"カーネルのコード改良点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#カーネルのコード改良点"}},[e._v("#")]),e._v(" カーネルのコード改良点")]),e._v(" "),t("p",[e._v("カーネルとは，osの本体となるファイルです．下記のコードでkernelディレクトリを作成します．")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /home/vscode/workspaces/mikanos-devcontainer/mikanos\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" kernel\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("touch")]),e._v(" kernel/main.cpp\n")])])]),t("p",[e._v("kernel/main.cppの中身は以下の通りである．")]),e._v(" "),t("div",{staticClass:"language-C++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('extern "C" void KernelMain(){\n    while(1) __asm__("hlt");\n}\n')])])]),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /home/vscode/workspaces/mikanos-devcontainer/mikanos/kernel\n\nclang++ -O2 -Wall -g --target"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("x86_64-elf -ffreestanding -mno-red-zone -fno-exceptions -fno-rtti -std"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("c++17 -c main.cpp\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# main.cpp  main.o")]),e._v("\n\nld.lld --entry KernelMain -z norelro --image-base 0x100000 --static -o kernel.elf main.o\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# kernel.elf  main.cpp  main.o")]),e._v("\n")])])]),t("p",[e._v("clang++の設定を下記に示す．")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("設定")]),e._v(" "),t("th",[e._v("説明")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("-02")]),e._v(" "),t("td",[e._v("レベル2の最適化を行う")])]),e._v(" "),t("tr",[t("td",[e._v("-Wall")]),e._v(" "),t("td",[e._v("警告をたくさん出す")])]),e._v(" "),t("tr",[t("td",[e._v("-g")]),e._v(" "),t("td",[e._v("デバック情報付きでコンパイルする")])]),e._v(" "),t("tr",[t("td",[e._v("--target=x86_64-elf")]),e._v(" "),t("td",[e._v("x86_64向けの機械語を生成する．出力ファイルの形式をELFとする．")])]),e._v(" "),t("tr",[t("td",[e._v("-ffreestanding")]),e._v(" "),t("td",[e._v("フリースタンディング環境向けにコンパイルする")])]),e._v(" "),t("tr",[t("td",[e._v("-mno-red-zone")]),e._v(" "),t("td",[e._v("Red Zone機能を無効にする")])]),e._v(" "),t("tr",[t("td",[e._v("-fno-exception")]),e._v(" "),t("td",[e._v("C++の例外機能は使わない")])]),e._v(" "),t("tr",[t("td",[e._v("-fno-rtti")]),e._v(" "),t("td",[e._v("C++の動的型情報を使わない")])]),e._v(" "),t("tr",[t("td",[e._v("-std=c++17")]),e._v(" "),t("td",[e._v("C++のバージョンをC++17とする")])]),e._v(" "),t("tr",[t("td",[e._v("-c")]),e._v(" "),t("td",[e._v("コンパイルのみする．リンクしない．")])])])]),e._v(" "),t("p",[e._v("ld.lldの設定を下記に示す．")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("設定")]),e._v(" "),t("th",[e._v("説明")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("--entry KernelMain")]),e._v(" "),t("td",[e._v("KernelMain()をエントリポイントとする")])]),e._v(" "),t("tr",[t("td",[e._v("-z norelro")]),e._v(" "),t("td",[e._v("リロケーション情報を読み込み専用にする機能を使わない")])]),e._v(" "),t("tr",[t("td",[e._v("--image-base 0x100000")]),e._v(" "),t("td",[e._v("出力されたバイナリのベースアドレスを0x10000番地とする")])]),e._v(" "),t("tr",[t("td",[e._v("--static")]),e._v(" "),t("td",[e._v("静的リンクを行う")])]),e._v(" "),t("tr",[t("td",[e._v("-o kernel.elf")]),e._v(" "),t("td",[e._v("出力ファイル名をkernel.elfとする")])])])]),e._v(" "),t("p",[e._v("下記のコードをMain.cのメイン関数に追記する．")]),e._v(" "),t("div",{staticClass:"language-C++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// カーネルファイルの読み込み\n// #@@range_begin(read_kernel)\nEFI_FILE_PROTOCOL* kernel_file;\nroot_dir->Open(\n  root_dir, &kernel_file, L"\\\\kernel.elf",\n  EFI_FILE_MODE_READ, 0);\n\nUINTN file_info_size = sizeof(EFI_FILE_INFO) + sizeof(CHAR16) * 12;\nUINT8 file_info_buffer[file_info_size];\nkernel_file->GetInfo(\n  kernel_file, &gEfiFileInfoGuid,\n  &file_info_size, file_info_buffer);\n\nEFI_FILE_INFO* file_info = (EFI_FILE_INFO*)file_info_buffer;\nUINTN kernel_file_size = file_info->FileSize;\n\nEFI_PHYSICAL_ADDRESS kernel_base_addr = 0x100000;\ngBS->AllocatePages(\n  AllocateAddress, EfiLoaderData,\n  (kernel_file_size + 0xfff) / 0x1000, &kernel_base_addr);\nkernel_file->Read(kernel_file, &kernel_file_size, (VOID*)kernel_base_addr);\nPrint(L"Kernel: 0x%0lx (%lu bytes)\\n", kernel_base_addr, kernel_file_size);\n// #@@range_end(read_kernel)\n')])])]),t("div",{staticClass:"language-C++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("typedef struct{\n  UINT64 Size, FileSize, PhysicalSize;\n  EFI_TIME CreateTime, LastAccessTime, ModificationTime;\n  UINT64 Attribute;\n  CHAR16 FileName[];\n} EFI_FILE_INFO;\n")])])]),t("div",{staticClass:"language-C++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// カーネル起動時にブートサービスを停止させる\n// #@@range_begin(exit_bs)\nEFI_STATUS status;\nstatus = gBS->ExitBootServices(image_handle, memmap.map_key);\nif (EFI_ERROR(status)){\n  status = GetMemoryMap(&memmap);\n  if (EFI_ERROR(status)){\n    Print(L"failed to get memory map: %r\\n", status);\n    while(1);\n  }\n  status = gBS->ExitBootServices(image_handle, memmap.map_key);\n  if (EFI_ERROR(status)){\n    Print(L"Could not exit boot service: %r\\n", status);\n    while(1);\n  }\n}\n// #@@range_end(exit_bs)\n')])])]),t("div",{staticClass:"language-C++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// メイン関数をカーネル起動する\n// #@@range_begin(call_kernel)\nUINT64 entry_addr = *(UINT64*)(kernel_base_addr + 24);\n\ntypedef void EntryPointType(void);\nEntryPointType* entry_point = (EntryPointType*)entry_addr;\nentry_point();\n// #@@range_end(call_kernel)\n")])])]),t("p",[e._v("カーネルの内部構造は下記のコードで閲覧できる．")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /home/vscode/workspaces/mikanos-devcontainer/mikanos/kernel\nreadelf -h kernel.elf\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ELF Header:")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Class:                             ELF64")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Data:                              2's complement, little endian")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Version:                           1 (current)")]),e._v("\n")])])]),t("h2",{attrs:{id:"コードの全容"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#コードの全容"}},[e._v("#")]),e._v(" コードの全容")]),e._v(" "),t("p",[e._v("Main.cの内容を下記に示す．")]),e._v(" "),t("div",{staticClass:"language-C++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('#include  <Uefi.h>\n#include  <Library/UefiLib.h>\n#include  <Library/UefiBootServicesTableLib.h>\n#include  <Library/PrintLib.h>\n#include  <Protocol/LoadedImage.h>\n#include  <Protocol/SimpleFileSystem.h>\n#include  <Protocol/DiskIo2.h>\n#include  <Protocol/BlockIo.h>\n\n// #@@range_begin(include)\n#include  <Guid/FileInfo.h>\n// #@@range_end(include)\n\nstruct MemoryMap{\n  UINTN buffer_size;\n  VOID* buffer;\n  UINTN map_size;\n  UINTN map_key;\n  UINTN descriptor_size;\n  UINT32 descriptor_version;\n};\n\nEFI_STATUS GetMemoryMap(struct MemoryMap* map) {\n  if (map->buffer == NULL) {\n    return EFI_BUFFER_TOO_SMALL;\n  }\n\n  map->map_size = map->buffer_size;\n  return gBS->GetMemoryMap(\n      &map->map_size,\n      (EFI_MEMORY_DESCRIPTOR*)map->buffer,\n      &map->map_key,\n      &map->descriptor_size,\n      &map->descriptor_version);\n}\n\n\nconst CHAR16* GetMemoryTypeUnicode(EFI_MEMORY_TYPE type) {\n  switch (type) {\n    case EfiReservedMemoryType: return L"EfiReservedMemoryType";\n    case EfiLoaderCode: return L"EfiLoaderCode";\n    case EfiLoaderData: return L"EfiLoaderData";\n    case EfiBootServicesCode: return L"EfiBootServicesCode";\n    case EfiBootServicesData: return L"EfiBootServicesData";\n    case EfiRuntimeServicesCode: return L"EfiRuntimeServicesCode";\n    case EfiRuntimeServicesData: return L"EfiRuntimeServicesData";\n    case EfiConventionalMemory: return L"EfiConventionalMemory";\n    case EfiUnusableMemory: return L"EfiUnusableMemory";\n    case EfiACPIReclaimMemory: return L"EfiACPIReclaimMemory";\n    case EfiACPIMemoryNVS: return L"EfiACPIMemoryNVS";\n    case EfiMemoryMappedIO: return L"EfiMemoryMappedIO";\n    case EfiMemoryMappedIOPortSpace: return L"EfiMemoryMappedIOPortSpace";\n    case EfiPalCode: return L"EfiPalCode";\n    case EfiPersistentMemory: return L"EfiPersistentMemory";\n    case EfiMaxMemoryType: return L"EfiMaxMemoryType";\n    default: return L"InvalidMemoryType";\n  }\n}\n\nEFI_STATUS SaveMemoryMap(struct MemoryMap* map, EFI_FILE_PROTOCOL* file){\n  CHAR8 buf[256];\n  UINTN len;\n  \n  CHAR8* header = "Index Type, Type(name), PhysicalStart, NumberOfPages, Attribute\\n";\n  len = AsciiStrLen(header);\n  file->Write(file, &len, header);\n\n  Print(L"map->buffer = %08lx, map->map_size = %08lx\\n", \n      map->buffer, map->map_size);\n\n  EFI_PHYSICAL_ADDRESS iter;\n  int i;\n  for (iter = (EFI_PHYSICAL_ADDRESS)map->buffer, i = 0;\n  iter < (EFI_PHYSICAL_ADDRESS)map->buffer + map->map_size;\n  iter += map->descriptor_size, i++){\n    EFI_MEMORY_DESCRIPTOR* desc = (EFI_MEMORY_DESCRIPTOR*)iter;\n    len = AsciiSPrint(\n      buf, sizeof(buf),\n      "%u, %x, %-ls, %08lx, %lx, %lx\\n",\n      i, desc->Type, GetMemoryTypeUnicode(desc->Type),\n      desc->PhysicalStart, desc->NumberOfPages,\n      desc->Attribute & 0xffffflu);\n    file->Write(file, &len, buf);\n  }\n  return EFI_SUCCESS;\n}\n\nEFI_STATUS OpenRootDir(EFI_HANDLE image_handle, EFI_FILE_PROTOCOL** root){\n  EFI_LOADED_IMAGE_PROTOCOL* loaded_image;\n  EFI_SIMPLE_FILE_SYSTEM_PROTOCOL* fs;\n\n  gBS->OpenProtocol(\n    image_handle,\n    &gEfiLoadedImageProtocolGuid,\n    (VOID**)&loaded_image,\n    image_handle,\n    NULL,\n    EFI_OPEN_PROTOCOL_BY_HANDLE_PROTOCOL);\n\n  gBS->OpenProtocol(\n    loaded_image->DeviceHandle,\n    &gEfiSimpleFileSystemProtocolGuid,\n    (VOID**)&fs,\n    image_handle,\n    NULL,\n    EFI_OPEN_PROTOCOL_BY_HANDLE_PROTOCOL);\n\n  fs->OpenVolume(fs, root);\n\n  return EFI_SUCCESS;\n}\n\n\n\nEFI_STATUS EFIAPI UefiMain(\n    // ウィンドウ等を操作したいときに対象を識別するために割り当てられる一意の番号\n    EFI_HANDLE image_handle,\n    // データを入れる表\n    EFI_SYSTEM_TABLE* system_table) {\n\n  Print(L"Hello, Mikan World!\\n");\n\n  CHAR8 memmap_buf[4096 * 4];\n  struct MemoryMap memmap = {sizeof(memmap_buf), memmap_buf, 0, 0, 0, 0};\n  GetMemoryMap(&memmap);\n\n  Print(L"GetMemoryMap done\\n");\n\n  EFI_FILE_PROTOCOL* root_dir;\n  OpenRootDir(image_handle, &root_dir);\n\n  Print(L"OpenRootDir done\\n");\n\n  EFI_FILE_PROTOCOL* memmap_file;\n  root_dir->Open(\n    root_dir, &memmap_file, L"\\\\memmap",\n    EFI_FILE_MODE_READ | EFI_FILE_MODE_WRITE | EFI_FILE_MODE_CREATE, 0);\n\n  Print(L"EFI_FILE_PROTOCOL done\\n");\n\n  SaveMemoryMap(&memmap, memmap_file);\n  memmap_file->Close(memmap_file);\n\n  // #@@range_begin(read_kernel)\n  EFI_FILE_PROTOCOL* kernel_file;\n  root_dir->Open(\n    root_dir, &kernel_file, L"\\\\kernel.elf",\n    EFI_FILE_MODE_READ, 0);\n\n  UINTN file_info_size = sizeof(EFI_FILE_INFO) + sizeof(CHAR16) * 12;\n  UINT8 file_info_buffer[file_info_size];\n  kernel_file->GetInfo(\n    kernel_file, &gEfiFileInfoGuid,\n    &file_info_size, file_info_buffer);\n\n  EFI_FILE_INFO* file_info = (EFI_FILE_INFO*)file_info_buffer;\n  UINTN kernel_file_size = file_info->FileSize;\n\n  EFI_PHYSICAL_ADDRESS kernel_base_addr = 0x100000;\n  gBS->AllocatePages(\n    AllocateAddress, EfiLoaderData,\n    (kernel_file_size + 0xfff) / 0x1000, &kernel_base_addr);\n  kernel_file->Read(kernel_file, &kernel_file_size, (VOID*)kernel_base_addr);\n  Print(L"Kernel: 0x%0lx (%lu bytes)\\n", kernel_base_addr, kernel_file_size);\n  // #@@range_end(read_kernel)\n\n  // #@@range_begin(exit_bs)\n  EFI_STATUS status;\n  status = gBS->ExitBootServices(image_handle, memmap.map_key);\n  if (EFI_ERROR(status)){\n    status = GetMemoryMap(&memmap);\n    if (EFI_ERROR(status)){\n      Print(L"failed to get memory map: %r\\n", status);\n      while(1);\n    }\n    status = gBS->ExitBootServices(image_handle, memmap.map_key);\n    if (EFI_ERROR(status)){\n      Print(L"Could not exit boot service: %r\\n", status);\n      while(1);\n    }\n  }\n  // #@@range_end(exit_bs)\n\n  // #@@range_begin(call_kernel)\n  UINT64 entry_addr = *(UINT64*)(kernel_base_addr + 24);\n\n  typedef void EntryPointType(void);\n  EntryPointType* entry_point = (EntryPointType*)entry_addr;\n  entry_point();\n  // #@@range_end(call_kernel)\n\n  Print(L"All done\\n");\n\n  while (1);\n  return EFI_SUCCESS;\n}\n')])])]),t("p",[e._v("Loader.infの内容を下記に示す．")]),e._v(" "),t("div",{staticClass:"language-C++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[Defines]\n  INF_VERSION                    = 0x00010006\n  BASE_NAME                      = Loader\n  FILE_GUID                      = c9d0d202-71e9-11e8-9e52-cfbfd0063fbf\n  MODULE_TYPE                    = UEFI_APPLICATION\n  VERSION_STRING                 = 0.1\n  ENTRY_POINT                    = UefiMain\n\n#  VALID_ARCHITECTURES           = X64\n\n[Sources]\n  Main.c\n\n[Packages]\n  MdePkg/MdePkg.dec\n\n[LibraryClasses]\n  UefiLib\n  UefiApplicationEntryPoint\n\n  BaseLib\n  BaseMemoryLib\n  DebugLib\n  DevicePathLib\n  MemoryAllocationLib\n  PcdLib\n  PrintLib\n  DebugLib\n  UefiBootServicesTableLib\n  UefiRuntimeServicesTableLib\n\n[Guids]\n  gEfiFileInfoGuid # 追加\n\n[Protocols]\n  gEfiLoadedImageProtocolGuid\n  gEfiLoadFileProtocolGuid\n  gEfiSimpleFileSystemProtocolGuid\n")])])]),t("h2",{attrs:{id:"build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[e._v("#")]),e._v(" Build")]),e._v(" "),t("p",[e._v("下記のコードでビルドします．")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/edk2\nbuild\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# qemuモニタ起動")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/osbook/devenv/run_qemu.sh Build/MikanLoaderX64/DEBUG_CLANG38/X64/Loader.efi "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/workspaces/mikanos-devcontainer/mikanos/kernel/kernel.elf\n")])])]),t("p",[e._v("run_qemu.shを直打ちする場合は，以下のコマンドを実行している．")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" /home/vscode/edk2/Build/MikanLoaderX64/DEBUG_CLANG38/X64\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# imgファイルの新規作成")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("rm")]),e._v(" -f ./disk.img\nqemu-img create -f raw ./disk.img 200M\nmkfs.fat -n "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'MIKAN OS'")]),e._v(" -s "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" -f "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" -R "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("32")]),e._v(" -F "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("32")]),e._v(" ./disk.img\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# imgファイルのマウント")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p ./mnt\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mount")]),e._v(" -o loop ./disk.img ./mnt\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# mntディレクトリにファイルを移動")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -p ./mnt/EFI/BOOT\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" Loader.efi ./mnt/EFI/BOOT/BOOTX64.EFI\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/workspaces/mikanos-devcontainer/mikanos/kernel/kernel.elf ./mnt/\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("umount")]),e._v(" ./mnt\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# qemu起動(-vnc :0は削除)")]),e._v("\nqemu-system-x86_64 -m 1G -drive "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("pflash,format"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("raw,readonly,file"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/home/vscode/osbook/devenv/OVMF_CODE.fd -drive "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("pflash,format"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("raw,file"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/home/vscode/osbook/devenv/OVMF_VARS.fd -drive "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("ide,index"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v(",media"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("disk,format"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("raw,file"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("./disk.img -device nec-usb-xhci,id"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("xhci -device usb-mouse -device usb-kbd -monitor stdio\n")])])]),t("p",[e._v("上記のコードが実行されていれば，モニタには「All done」は表示されずに，「RAX=000000000010000」と「hlt」が表示されます．")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("qemu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" info registers\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# RAX=0000000000100000 RBX=000000003effef18 RCX=0000000000000000 RDX=0000000000000000")]),e._v("\n")])])]),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("qemu"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" x /2i 0x101010\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 0x00101010:  f4                       hlt      ")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 0x00101011:  eb fd                    jmp      0x101010")]),e._v("\n")])])]),t("h2",{attrs:{id:"まとめ"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#まとめ"}},[e._v("#")]),e._v(" まとめ")]),e._v(" "),t("p",[e._v("「ゼロからのOS自作入門」3章 3.1〜3.3を実行しました(前編)．")]),e._v(" "),t("h2",{attrs:{id:"参考サイト"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考サイト"}},[e._v("#")]),e._v(" 参考サイト")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://qiita.com/yoyomion/items/6e3e2648830c457ffe52",target:"_blank",rel:"noopener noreferrer"}},[e._v("clangの最適化で動作が変わった"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://px.a8.net/svt/ejp?a8mat=3HBXCY+4DRW36+50+2HM5Z5",rel:"nofollow"}},[t("img",{attrs:{border:"0",width:"1000",height:"124",alt:"",src:"https://www27.a8.net/svt/bgt?aid=210508450265&wid=001&eno=01&mid=s00000000018015052000&mc=1"}})]),t("img",{attrs:{border:"0",width:"1",height:"1",src:"https://www10.a8.net/0.gif?a8mat=3HBXCY+4DRW36+50+2HM5Z5",alt:""}})]),e._v(" "),t("p",[t("a",{attrs:{href:"https://px.a8.net/svt/ejp?a8mat=3HIN6N+3YAMCY+CO4+6BMG1",rel:"nofollow"}},[t("img",{attrs:{border:"0",width:"1000",height:"124",alt:"",src:"https://www23.a8.net/svt/bgt?aid=210821855239&wid=001&eno=01&mid=s00000001642001062000&mc=1"}})]),t("img",{attrs:{border:"0",width:"1",height:"1",src:"https://www17.a8.net/0.gif?a8mat=3HIN6N+3YAMCY+CO4+6BMG1",alt:""}})]),e._v(" "),t("p",[t("a",{attrs:{href:"https://px.a8.net/svt/ejp?a8mat=3HIN6N+7FBNEA+4AQ0+5YJRM",rel:"nofollow"}},[e._v("全国630店舗以上！もみほぐし・足つぼ・ハンドリフレ・クイックヘッドのリラクゼーション店【りらくる】")]),t("img",{attrs:{border:"0",width:"1",height:"1",src:"https://www15.a8.net/0.gif?a8mat=3HIN6N+7FBNEA+4AQ0+5YJRM",alt:""}})]),e._v(" "),t("ClientOnly",[t("CallInArticleAdsense")],1)],1)}),[],!1,null,null,null);n.default=s.exports}}]);